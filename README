Zopfli Compression Algorithm is a compression library programmed in C to perform
very good, but slow, deflate or zlib compression.

The basic function to compress data is ZopfliCompress in zopfli.h. Use the
ZopfliOptions object to set parameters that affect the speed and compression.
Use the ZopfliInitOptions function to place the default values in the
ZopfliOptions first.

ZopfliCompress supports deflate, gzip and zlib output format with a parameter.
To support only one individual format, you can instead use ZopfliDeflate in
deflate.h, ZopfliZlibCompress in zlib_container.h or ZopfliGzipCompress in
gzip_container.h.

ZopfliDeflate creates a valid deflate stream in memory, see:
http://www.ietf.org/rfc/rfc1951.txt
ZopfliZlibCompress creates a valid zlib stream in memory, see:
http://www.ietf.org/rfc/rfc1950.txt
ZopfliGzipCompress creates a valid gzip stream in memory, see:
http://www.ietf.org/rfc/rfc1952.txt

This library can only compress, not decompress. Existing zlib or deflate
libraries can decompress the data.

zopfli_bin.c is separate from the library and contains an example program to
create very well compressed gzip files. Currently the makefile builds this
program with the library statically linked in.

To build the binary, use "make". To build the library as a shared Linux library,
use "make libzopfli". The source code of Zopfli is under src/zopfli.

Zopfli Compression Algorithm was created by Lode Vandevenne and Jyrki
Alakuijala, based on an algorithm by Jyrki Alakuijala.

====================================
         KrzYmod v12 Notes
====================================

Additional command line switches:
* --mb#:      maximum blocks, 0 = unlimited (d: 15),
* --mls#:     maximum length score (d: 1024),
* --bsr#:     block splitting recursion (min: 2, d: 9),
* --mui#:     maximum unsucessful iterations after last best (d: 0),
* --lazy:     enable lazy matching in LZ77 Greedy (d: OFF),
* --ohh:      optymize huffman header (d: OFF) [by Frédéric Kayser],
* --gzipname: output to gzip format with filename,
* --zip:      output to zip format,
* --dir:      accept directory as input, requires: --zip,
* --v#:       verbose level (0-4, d: 1),
* --n#:       number of blocks,
* --b#:       block size in bytes,
* --cbs#:     custom block split points in hex separated with comma.

--mb allows to increase or reduce number of blocks the stram gets split to
when using automatic splitting.

--mls, --bsr, --lazy, --ohh provide finetuning for zopfli.

--n --b --cbs allow to set number, size of blocks or custom block split
points to override zopfli block split decissions.

--zip outputs to ZIP container.

--dir will read all files in given directory and add them to ZIP archive
one at a time while updating zip on-fly. So in case operation is aborted
You can still access Your already compressed files.
KrzYmod doesn't support empty files and directories, adding to existing
ZIP archive is also not supported. Character encoding may be lost
or rendered improperly when using other alphabet types than english.
Most compression programs allow changing filenames without recompression.

--v is customized -v making it possible to set verbosity of Zopfli output,
as well as making it fully quiet (level 0).

Pressing CTRL+C while program is compressing data will set maximum
unsuccessful iterations after last best to 1. This will make Zopfli
finish work faster if the parameters were set too high.

Supports Unix (gzip) and MS-DOS (zip) timestamps, as well as outputting
to gzip format with filename included (gzipname).

Adds percentage progress bar updated everytime block gets
successfully compressed and a lot of more information on
different verbosity levels.

Fixes few bugs/crashes found in original Zopfli project.

Makefile included should provide ~20% faster builds.


If You enjoy these changes You may give me a small reward in Bitcoins to:
1KrzY1CwE532e6YjN4aCzgV19gtAzQMatJ ;)

====================================
           by Mr_KrzYch00
====================================
end of KrzYmod Notes.
